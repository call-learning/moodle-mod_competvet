{"version":3,"file":"roleassign.min.js","sources":["../../../src/local/view/roleassign.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport Repository from 'mod_competvet/local/new-repository';\nimport 'mod_competvet/local/forms/role_upload_form';\n\n/**\n * Manage role assignments for competvet.\n *\n * @module     mod_competvet/local/view/roleassign\n * @copyright  2025 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nclass CompetvetRoleAssign {\n\n    /**\n     * Constructor.\n     *\n     */\n    constructor() {\n        this.app = document.querySelector('[data-region=\"roleassign\"]');\n        if (!this.app) {\n            return;\n        }\n        this.addEventListeners();\n    }\n\n    /**\n     * Add event listeners for the role assignment functionality.\n     */\n    addEventListeners() {\n        document.addEventListener('click', (event) => {\n            if (event.target.matches('[data-action=\"add\"]')) {\n                this.handleRoleAssignment(event);\n            }\n            if (event.target.matches('[data-action=\"remove\"]')) {\n                this.handleRoleRemoval(event);\n            }\n            if (event.target.matches('[data-action=\"exportcsv\"]')) {\n                event.preventDefault();\n                this.exportCsv(event);\n            }\n        });\n    }\n\n    /**\n     * Handle role assignment.\n     *\n     * @param {Event} event The click event.\n     */\n    handleRoleAssignment(event) {\n        event.preventDefault();\n        const addSelect = this.app.querySelector('select#addselect');\n        const selectedUserIds = Array.from(addSelect.selectedOptions).map(option => option.value);\n\n        // Perform the role assignment logic here.\n        // This could involve an AJAX request to the server.\n        window.console.log(`Assigning role to users: ${selectedUserIds.join(', ')}`);\n\n        const result = Repository.addRemoveRols({\n            action: 'add',\n            userids: selectedUserIds,\n            roleid: this.app.dataset.roleid, // Assuming the role ID is stored in a data attribute\n            cmid: this.app.dataset.cmid // Assuming the course module ID is stored in a data attribute\n        });\n        if (!result) {\n            window.console.error('Failed to assign roles for users:', selectedUserIds);\n            return;\n        }\n\n        // Update the UI accordingly.\n        this.updateUI();\n    }\n\n    /**\n     * Handle role removal.\n     *\n     * @param {Event} event The click event.\n     */\n    handleRoleRemoval(event) {\n        event.preventDefault();\n        const removeSelect = this.app.querySelector('select#removeselect');\n        const userIds = Array.from(removeSelect.selectedOptions).map(option => option.value);\n\n        // Perform the role removal logic here.\n        // This could involve an AJAX request to the server.\n        window.console.log(`Removing role from users: ${userIds.join(', ')}`);\n\n        const result = Repository.addRemoveRols({\n            action: 'remove',\n            userids: userIds,\n            roleid: this.app.dataset.roleid, // Assuming the role ID is stored in a data attribute\n            cmid: this.app.dataset.cmid // Assuming the course module ID is stored in a data attribute\n        });\n        if (!result) {\n            window.console.error('Failed to remove roles for users:', userIds);\n            return;\n        }\n        this.updateUI();\n    }\n\n    /**\n     * Export the current role assignments to a CSV file.\n     * @param {Event} event The click event.\n     */\n    async exportCsv(event) {\n        event.preventDefault();\n        const csvData = await Repository.getRoles({\n            cmid: this.app.dataset.cmid // Assuming the course module ID is stored in a data attribute\n        });\n        // Transform csvData into CSV column structure: username, roleshortname_1, roleshortname_2, ...\n        if (!csvData || !Array.isArray(csvData)) {\n            window.console.error('Failed to export role assignments to CSV.');\n            return;\n        }\n        // Collect all unique role shortnames.\n        const roles = csvData.map(r => r.roleshortname);\n        // Collect all unique usernames.\n        const userSet = new Set();\n        csvData.forEach(role => {\n            role.users.forEach(user => {\n                userSet.add(user.username);\n            });\n        });\n        const usernames = Array.from(userSet);\n        // Build a map: username => { role1: true, role2: true, ... }\n        const userRoleMap = {};\n        usernames.forEach(username => {\n            userRoleMap[username] = {};\n            roles.forEach(role => {\n                userRoleMap[username][role] = false;\n            });\n        });\n        csvData.forEach(role => {\n            role.users.forEach(user => {\n                userRoleMap[user.username][role.roleshortname] = true;\n            });\n        });\n        // Build CSV rows\n        const header = ['username', ...roles];\n        const rows = [header];\n        usernames.forEach(username => {\n            const row = [username];\n            roles.forEach(role => {\n                row.push(userRoleMap[username][role] ? '1' : '');\n            });\n            rows.push(row);\n        });\n        // Convert to CSV string\n        const csvString = rows.map(row => row.join(';')).join('\\n');\n        const csvContent = 'data:text/csv;charset=utf-8,' + encodeURIComponent(csvString);\n        const link = document.createElement('a');\n        link.setAttribute('href', csvContent);\n        link.setAttribute('download', 'role_assignments.csv');\n        document.body.appendChild(link); // Required for FF\n        link.click();\n        document.body.removeChild(link);\n        window.console.log('Role assignments exported to CSV successfully.');\n        this.updateUI();\n    }\n\n    /**\n     * Update the UI after role assignment or removal.\n     */\n    updateUI() {\n        // This function should refresh the UI to reflect the changes made.\n        // For example, re-render the list of users with their roles.\n        window.console.log('UI updated after role assignment/removal.');\n        // You might want to call a function to re-fetch the user list or update the DOM directly.\n        // This is a placeholder for actual UI update logic.\n        // simply reload the page or re-render the user list.\n        window.location.reload(); // This is a simple way to refresh the page.\n    }\n}\n\n/*\n * Initialise\n *\n */\nconst init = () => {\n    new CompetvetRoleAssign();\n};\n\nexport default {\n    init: init,\n};\n"],"names":["CompetvetRoleAssign","constructor","app","document","querySelector","this","addEventListeners","addEventListener","event","target","matches","handleRoleAssignment","handleRoleRemoval","preventDefault","exportCsv","addSelect","selectedUserIds","Array","from","selectedOptions","map","option","value","window","console","log","join","Repository","addRemoveRols","action","userids","roleid","dataset","cmid","updateUI","error","removeSelect","userIds","csvData","getRoles","isArray","roles","r","roleshortname","userSet","Set","forEach","role","users","user","add","username","usernames","userRoleMap","rows","row","push","csvString","csvContent","encodeURIComponent","link","createElement","setAttribute","body","appendChild","click","removeChild","location","reload","init"],"mappings":";;;;;;;iKAyBMA,oBAMFC,mBACSC,IAAMC,SAASC,cAAc,8BAC7BC,KAAKH,UAGLI,oBAMTA,oBACIH,SAASI,iBAAiB,SAAUC,QAC5BA,MAAMC,OAAOC,QAAQ,6BAChBC,qBAAqBH,OAE1BA,MAAMC,OAAOC,QAAQ,gCAChBE,kBAAkBJ,OAEvBA,MAAMC,OAAOC,QAAQ,+BACrBF,MAAMK,sBACDC,UAAUN,WAU3BG,qBAAqBH,OACjBA,MAAMK,uBACAE,UAAYV,KAAKH,IAAIE,cAAc,oBACnCY,gBAAkBC,MAAMC,KAAKH,UAAUI,iBAAiBC,KAAIC,QAAUA,OAAOC,QAInFC,OAAOC,QAAQC,uCAAgCT,gBAAgBU,KAAK,QAErDC,uBAAWC,cAAc,CACpCC,OAAQ,MACRC,QAASd,gBACTe,OAAQ1B,KAAKH,IAAI8B,QAAQD,OACzBE,KAAM5B,KAAKH,IAAI8B,QAAQC,YAQtBC,WALDX,OAAOC,QAAQW,MAAM,oCAAqCnB,iBAalEJ,kBAAkBJ,OACdA,MAAMK,uBACAuB,aAAe/B,KAAKH,IAAIE,cAAc,uBACtCiC,QAAUpB,MAAMC,KAAKkB,aAAajB,iBAAiBC,KAAIC,QAAUA,OAAOC,QAI9EC,OAAOC,QAAQC,wCAAiCY,QAAQX,KAAK,QAE9CC,uBAAWC,cAAc,CACpCC,OAAQ,SACRC,QAASO,QACTN,OAAQ1B,KAAKH,IAAI8B,QAAQD,OACzBE,KAAM5B,KAAKH,IAAI8B,QAAQC,YAMtBC,WAHDX,OAAOC,QAAQW,MAAM,oCAAqCE,yBAUlD7B,OACZA,MAAMK,uBACAyB,cAAgBX,uBAAWY,SAAS,CACtCN,KAAM5B,KAAKH,IAAI8B,QAAQC,WAGtBK,UAAYrB,MAAMuB,QAAQF,qBAC3Bf,OAAOC,QAAQW,MAAM,mDAInBM,MAAQH,QAAQlB,KAAIsB,GAAKA,EAAEC,gBAE3BC,QAAU,IAAIC,IACpBP,QAAQQ,SAAQC,OACZA,KAAKC,MAAMF,SAAQG,OACfL,QAAQM,IAAID,KAAKE,sBAGnBC,UAAYnC,MAAMC,KAAK0B,SAEvBS,YAAc,GACpBD,UAAUN,SAAQK,WACdE,YAAYF,UAAY,GACxBV,MAAMK,SAAQC,OACVM,YAAYF,UAAUJ,OAAQ,QAGtCT,QAAQQ,SAAQC,OACZA,KAAKC,MAAMF,SAAQG,OACfI,YAAYJ,KAAKE,UAAUJ,KAAKJ,gBAAiB,cAKnDW,KAAO,CADE,CAAC,cAAeb,QAE/BW,UAAUN,SAAQK,iBACRI,IAAM,CAACJ,UACbV,MAAMK,SAAQC,OACVQ,IAAIC,KAAKH,YAAYF,UAAUJ,MAAQ,IAAM,OAEjDO,KAAKE,KAAKD,cAGRE,UAAYH,KAAKlC,KAAImC,KAAOA,IAAI7B,KAAK,OAAMA,KAAK,MAChDgC,WAAa,+BAAiCC,mBAAmBF,WACjEG,KAAOzD,SAAS0D,cAAc,KACpCD,KAAKE,aAAa,OAAQJ,YAC1BE,KAAKE,aAAa,WAAY,wBAC9B3D,SAAS4D,KAAKC,YAAYJ,MAC1BA,KAAKK,QACL9D,SAAS4D,KAAKG,YAAYN,MAC1BrC,OAAOC,QAAQC,IAAI,uDACdS,WAMTA,WAGIX,OAAOC,QAAQC,IAAI,6CAInBF,OAAO4C,SAASC,uBAYT,CACXC,KALS,SACLrE"}