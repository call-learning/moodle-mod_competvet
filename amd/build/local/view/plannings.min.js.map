{"version":3,"file":"plannings.min.js","sources":["../../../src/local/view/plannings.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Helper to filter the plannings\n *\n * @module     mod_competvet/local/view/plannings\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_strings as getStrings} from 'core/str';\nimport XLSX from 'mod_competvet/local/xlsx.mini.min';\n\n/**\n * Initialize the plannings view and add event listeners to the search fields.\n * @param {string} situationname The name of the situation.\n * @return {void}\n */\nexport const init = (situationname) => {\n    // Student Search\n    const studentSearchInput = document.querySelector('input[name=\"studentsearch\"]');\n    studentSearchInput.addEventListener('input', (e) => {\n        studentSearch(e);\n    });\n\n    // Group Search\n    const groupSearchInput = document.querySelector('input[name=\"groupsearch\"]');\n    groupSearchInput.addEventListener('input', (e) => {\n        groupSearch(e);\n    });\n\n    // Ungraded checkbox\n    const ungradedCheckbox = document.querySelector('input[id=\"searchungraded\"]');\n    ungradedCheckbox.addEventListener('change', (e) => {\n        ungradedSearch(e);\n    });\n\n    // Start date search\n    const startDateInput = document.querySelector('input[name=\"startdate\"]');\n    startDateInput.addEventListener('change', (e) => {\n        let unixTimestamp = 0;\n        if (e.target.value) {\n            // Convert the date string to a Date object\n            const dateObject = new Date(e.target.value);\n\n            // Convert the date object to a UNIX timestamp in milliseconds\n            const timestamp = dateObject.getTime();\n\n            // If you want the timestamp in seconds (like PHP's time() function),\n            // you can divide by 1000 and round it or floor it:\n            unixTimestamp = Math.floor(timestamp / 1000);\n        }\n        // Minus 1 day to include the selected day\n        unixTimestamp = unixTimestamp - 86400;\n        startDateSearch(unixTimestamp);\n    });\n\n    // Clear the startDateInput and reset the search.\n    const clearStartDate = document.querySelector('button[id=\"clearstartdate\"]');\n    clearStartDate.addEventListener('click', (e) => {\n        startDateInput.value = '';\n        startDateSearch(0);\n        e.preventDefault();\n    });\n\n    // Export to CSV button\n    const exportButton = document.querySelector('button[data-action=\"exportcsv\"]');\n    exportButton.classList.remove('d-none');\n    exportButton.addEventListener('click', (e) => {\n        exportToCsv(situationname);\n        e.preventDefault();\n    });\n\n};\n\n/**\n * Search for students in the plannings table.\n * @param {Event} e The event object.\n * @return {void}\n */\nconst studentSearch = (e) => {\n    const search = e.target.value;\n    const students = document.querySelectorAll('[data-region=\"studentname\"]');\n    students.forEach((student) => {\n        const studentName = student.textContent;\n        const row = student.closest('tr');\n        if (studentName.toLowerCase().includes(search.toLowerCase())) {\n            row.classList.remove('studentname-d-none');\n        } else {\n            row.classList.add('studentname-d-none');\n        }\n        // Check if all rows with the same planningid are hidden\n    });\n    hideEmptyPlannings();\n};\n\n/**\n * Search for groups in the plannings table.\n * @param {Event} e The event object.\n * @return {void}\n */\nconst groupSearch = (e) => {\n    const search = e.target.value;\n    const groups = document.querySelectorAll('[data-region=\"groupname\"]');\n    groups.forEach((group) => {\n        const groupName = group.textContent;\n        const row = group.closest('tr');\n        if (groupName.toLowerCase().includes(search.toLowerCase())) {\n            row.classList.remove('groupname-d-none');\n        } else {\n            row.classList.add('groupname-d-none');\n        }\n        // If a planning row is hidden, hide all student rows with the same planningid\n        const planningid = row.dataset.planningid;\n        hideStudentsInPlanning(planningid, 'groupname-d-none');\n    });\n    hideEmptyPlannings();\n};\n\n/**\n * Search for ungraded students in the plannings table.\n * @param {Event} e The event object.\n * @return {void}\n */\nconst ungradedSearch = (e) => {\n    const checked = e.target.checked;\n    const hasgrade = document.querySelectorAll('.student[data-hasgrade=\"1\"]');\n    if (checked) {\n        hasgrade.forEach((student) => {\n            student.classList.add('ungraded-d-none');\n        });\n    } else {\n        hasgrade.forEach((student) => {\n            student.classList.remove('ungraded-d-none');\n        });\n    }\n    hideEmptyPlannings();\n};\n\n/**\n * Search for students with a start date in the plannings table.\n * @param {number} value The UNIX timestamp of the start date.\n * @return {void}\n */\nconst startDateSearch = (value) => {\n    const plannings = document.querySelectorAll('.planning');\n    plannings.forEach((planning) => {\n        const endDate = planning.dataset.endtimestamp;\n        const row = planning.closest('tr');\n        if (value < endDate) {\n            row.classList.remove('startdate-d-none');\n        } else {\n            row.classList.add('startdate-d-none');\n        }\n        const planningid = row.dataset.planningid;\n        hideStudentsInPlanning(planningid, 'startdate-d-none');\n    });\n};\n\n/**\n * Hide empty plannings.\n * @return {void}\n */\nconst hideEmptyPlannings = () => {\n    const plannings = document.querySelectorAll('tr.planning');\n    plannings.forEach((planning) => {\n        const planningid = planning.dataset.planningid;\n        const students = document.querySelectorAll(`.student[data-planningid=\"${planningid}\"]`);\n        const hiddenStudents = document.querySelectorAll(`.student[data-planningid=\"${planningid}\"].studentname-d-none,\n            .student[data-planningid=\"${planningid}\"].groupname-d-none, .student[data-planningid=\"${planningid}\"].ungraded-d-none`);\n        if (students.length === hiddenStudents.length) {\n            const planningRow = document.querySelector(`.planning[data-planningid=\"${planningid}\"]`);\n            planningRow.classList.add('d-none');\n        } else {\n            const planningRow = document.querySelector(`.planning[data-planningid=\"${planningid}\"]`);\n            planningRow.classList.remove('d-none');\n        }\n    });\n};\n\n/**\n * Hide students in a planning.\n * @param {number} planningid The id of the planning.\n * @param {string} hideclass The class to hide the students.\n * @return {void}\n */\nconst hideStudentsInPlanning = (planningid, hideclass) => {\n    const planningRow = document.querySelector(`.planning[data-planningid=\"${planningid}\"].${hideclass}`);\n    if (planningRow) {\n        const studentRows = document.querySelectorAll(`.student[data-planningid=\"${planningid}\"]`);\n        studentRows.forEach((studentRow) => {\n            studentRow.classList.add(hideclass);\n        });\n    } else {\n        const studentRows = document.querySelectorAll(`.student[data-planningid=\"${planningid}\"]`);\n        studentRows.forEach((studentRow) => {\n            studentRow.classList.remove(hideclass);\n        });\n    }\n};\n\n/**\n * Export the plannings to a CSV file.\n * @param {string} situationname The name of the situation.\n * @return {void}\n */\nconst exportToCsv = async(situationname) => {\n    // If the row is hidden it has a class like studentname-d-none or groupname-d-none. Use a wildcard to select all hidden rows.\n    const rows = document.querySelectorAll('tr.student:not([class*=\"-d-none\"])');\n    const csv = [];\n    const [firstname, lastname, email, group, grade, grader, timegraded, comment, startdate, enddate] = await getStrings([\n        {key: 'firstname', component: 'moodle'},\n        {key: 'lastname', component: 'moodle'},\n        {key: 'email', component: 'moodle'},\n        {key: 'group', component: 'mod_competvet'},\n        {key: 'gradepercent', component: 'mod_competvet'},\n        {key: 'grader', component: 'mod_competvet'},\n        {key: 'timegraded', component: 'mod_competvet'},\n        {key: 'comment', component: 'mod_competvet'},\n        {key: 'startdate', component: 'mod_competvet'},\n        {key: 'enddate', component: 'mod_competvet'},\n    ]);\n    csv.push([firstname, lastname, email, group, grade, grader, timegraded, comment, startdate, enddate]);\n    rows.forEach((row) => {\n        // Student firstname.\n        const sfirstname = row.querySelector('[data-region=\"studentname\"]').dataset.firstname;\n        // Student lastname.\n        const slastname = row.querySelector('[data-region=\"studentname\"]').dataset.lastname;\n\n        // Student email.\n        const email = row.querySelector('[data-region=\"studentname\"]').dataset.email;\n\n        // Group name.\n        const planningid = row.dataset.planningid;\n        const planningrow = document.querySelector(`tr.planning[data-planningid=\"${planningid}\"]`);\n        const group = planningrow.querySelector('[data-region=\"groupname\"]').textContent;\n\n        // Grade.\n        const usergrade = row.querySelector('[data-region=\"usergrade\"]')?.dataset.rawgrade;\n        const grade = usergrade ?? '';\n\n        // Grader.\n        const gradercontainer = row.querySelector('[data-region=\"grader\"]');\n        const grader = gradercontainer ? gradercontainer.textContent.trim() : '';\n\n        // TimeGraded.\n        const timegradedcontainer = row.querySelector('[data-region=\"timegraded\"]');\n        const timegraded = timegradedcontainer ? timegradedcontainer.textContent.trim() : '';\n\n        // Comments.\n        const comment = row.querySelector('[data-region=\"comments\"]').textContent.trim();\n\n        // Date.\n        const startdate = planningrow.dataset.startdate;\n        const enddate = planningrow.dataset.enddate;\n\n        csv.push([sfirstname, slastname, email, group, grade, grader, timegraded, `\"${comment}\"`, startdate, enddate]);\n    });\n\n    // Export to XLSX\n    const wb = XLSX.utils.book_new();\n    const ws = XLSX.utils.aoa_to_sheet(csv);\n    const filename = `${situationname}-${new Date().toISOString().slice(0, 10)}-export.xlsx`;\n    XLSX.utils.book_append_sheet(wb, ws, 'Plannings');\n    XLSX.writeFile(wb, filename);\n};\n\n\n"],"names":["situationname","document","querySelector","addEventListener","e","studentSearch","groupSearch","ungradedSearch","startDateInput","unixTimestamp","target","value","timestamp","Date","getTime","Math","floor","startDateSearch","preventDefault","exportButton","classList","remove","exportToCsv","search","querySelectorAll","forEach","student","studentName","textContent","row","closest","toLowerCase","includes","add","hideEmptyPlannings","group","groupName","planningid","dataset","hideStudentsInPlanning","checked","hasgrade","planning","endDate","endtimestamp","students","hiddenStudents","length","hideclass","studentRow","async","rows","csv","firstname","lastname","email","grade","grader","timegraded","comment","startdate","enddate","key","component","push","sfirstname","slastname","planningrow","usergrade","_row$querySelector","rawgrade","gradercontainer","trim","timegradedcontainer","wb","XLSX","utils","book_new","ws","aoa_to_sheet","filename","toISOString","slice","book_append_sheet","writeFile"],"mappings":"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"}