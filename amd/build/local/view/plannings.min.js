define("mod_competvet/local/view/plannings",["exports","core/str","mod_competvet/local/xlsx.mini.min","../new-repository","core/toast"],(function(_exports,_str,_xlsxMini,_newRepository,_toast){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * Helper to filter the plannings
   *
   * @module     mod_competvet/local/view/plannings
   * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0,_xlsxMini=_interopRequireDefault(_xlsxMini),_newRepository=_interopRequireDefault(_newRepository);_exports.init=situationname=>{document.querySelector('input[name="studentsearch"]').addEventListener("input",(e=>{studentSearch(e)}));document.querySelector('input[name="groupsearch"]').addEventListener("input",(e=>{groupSearch(e)}));document.querySelector('input[id="searchungraded"]').addEventListener("change",(e=>{ungradedSearch(e)}));const startDateInput=document.querySelector('input[name="startdate"]');startDateInput.addEventListener("change",(e=>{let unixTimestamp=0;if(e.target.value){const timestamp=new Date(e.target.value).getTime();unixTimestamp=Math.floor(timestamp/1e3)}unixTimestamp-=86400,startDateSearch(unixTimestamp)}));document.querySelector('button[id="clearstartdate"]').addEventListener("click",(e=>{startDateInput.value="",startDateSearch(0),e.preventDefault()}));const exportButton=document.querySelector('button[data-action="exportcsv"]');exportButton.classList.remove("d-none"),exportButton.addEventListener("click",(e=>{exportToCsv(situationname),e.preventDefault()})),document.addEventListener("click",(e=>{const button=e.target.closest("button[data-action]");if(button){switch(button.dataset.action){case"orphanfix:add":case"orphanfix:move":orphanFix(button)}}}))};const orphanFix=async btn=>{const args={planningid:btn.dataset.planningid,oldplanningid:btn.dataset.oldplanningid,userid:btn.dataset.userid,groupid:btn.dataset.groupid,action:btn.dataset.action},result=await _newRepository.default.fixOrphanUser(args);""!=result.result?((0,_toast.add)(result.result),setTimeout((()=>{window.location.reload()}),1500)):(0,_toast.add)("Fixing orphan user failed")},studentSearch=e=>{const search=e.target.value;document.querySelectorAll('[data-region="studentname"]').forEach((student=>{const studentName=student.textContent,row=student.closest("tr");studentName.toLowerCase().includes(search.toLowerCase())?row.classList.remove("studentname-d-none"):row.classList.add("studentname-d-none")})),hideEmptyPlannings()},groupSearch=e=>{const search=e.target.value;document.querySelectorAll('[data-region="groupname"]').forEach((group=>{const groupName=group.textContent,row=group.closest("tr");groupName.toLowerCase().includes(search.toLowerCase())?row.classList.remove("groupname-d-none"):row.classList.add("groupname-d-none");const planningid=row.dataset.planningid;hideStudentsInPlanning(planningid,"groupname-d-none")})),hideEmptyPlannings()},ungradedSearch=e=>{const checked=e.target.checked,hasgrade=document.querySelectorAll('.student[data-hasgrade="1"]');checked?hasgrade.forEach((student=>{student.classList.add("ungraded-d-none")})):hasgrade.forEach((student=>{student.classList.remove("ungraded-d-none")})),hideEmptyPlannings()},startDateSearch=value=>{document.querySelectorAll(".planning").forEach((planning=>{const endDate=planning.dataset.endtimestamp,row=planning.closest("tr");value<endDate?row.classList.remove("startdate-d-none"):row.classList.add("startdate-d-none");const planningid=row.dataset.planningid;hideStudentsInPlanning(planningid,"startdate-d-none")}))},hideEmptyPlannings=()=>{document.querySelectorAll("tr.planning").forEach((planning=>{const planningid=planning.dataset.planningid,students=document.querySelectorAll('.student[data-planningid="'.concat(planningid,'"]')),hiddenStudents=document.querySelectorAll('.student[data-planningid="'.concat(planningid,'"].studentname-d-none,\n            .student[data-planningid="').concat(planningid,'"].groupname-d-none, .student[data-planningid="').concat(planningid,'"].ungraded-d-none'));if(students.length===hiddenStudents.length){document.querySelector('.planning[data-planningid="'.concat(planningid,'"]')).classList.add("d-none")}else{document.querySelector('.planning[data-planningid="'.concat(planningid,'"]')).classList.remove("d-none")}}))},hideStudentsInPlanning=(planningid,hideclass)=>{if(document.querySelector('.planning[data-planningid="'.concat(planningid,'"].').concat(hideclass))){document.querySelectorAll('.student[data-planningid="'.concat(planningid,'"]')).forEach((studentRow=>{studentRow.classList.add(hideclass)}))}else{document.querySelectorAll('.student[data-planningid="'.concat(planningid,'"]')).forEach((studentRow=>{studentRow.classList.remove(hideclass)}))}},exportToCsv=async situationname=>{const rows=document.querySelectorAll('tr.student:not([class*="-d-none"])'),csv=[],[firstname,lastname,email,group,grade,grader,timegraded,comment,startdate,enddate]=await(0,_str.get_strings)([{key:"firstname",component:"moodle"},{key:"lastname",component:"moodle"},{key:"email",component:"moodle"},{key:"group",component:"mod_competvet"},{key:"gradepercent",component:"mod_competvet"},{key:"grader",component:"mod_competvet"},{key:"timegraded",component:"mod_competvet"},{key:"comment",component:"mod_competvet"},{key:"startdate",component:"mod_competvet"},{key:"enddate",component:"mod_competvet"}]);csv.push([firstname,lastname,email,group,grade,grader,timegraded,comment,startdate,enddate]),rows.forEach((row=>{var _row$querySelector;const sfirstname=row.querySelector('[data-region="studentname"]').dataset.firstname,slastname=row.querySelector('[data-region="studentname"]').dataset.lastname,email=row.querySelector('[data-region="studentname"]').dataset.email,planningid=row.dataset.planningid,planningrow=document.querySelector('tr.planning[data-planningid="'.concat(planningid,'"]')),group=planningrow.querySelector('[data-region="groupname"]').textContent,usergrade=null===(_row$querySelector=row.querySelector('[data-region="usergrade"]'))||void 0===_row$querySelector?void 0:_row$querySelector.dataset.rawgrade,grade=null!=usergrade?usergrade:"",gradercontainer=row.querySelector('[data-region="grader"]'),grader=gradercontainer?gradercontainer.textContent.trim():"",timegradedcontainer=row.querySelector('[data-region="timegraded"]'),timegraded=timegradedcontainer?timegradedcontainer.textContent.trim():"",comment=row.querySelector('[data-region="comments"]').textContent.trim(),startdate=planningrow.dataset.startdate,enddate=planningrow.dataset.enddate;csv.push([sfirstname,slastname,email,group,grade,grader,timegraded,'"'.concat(comment,'"'),startdate,enddate])}));const wb=_xlsxMini.default.utils.book_new(),ws=_xlsxMini.default.utils.aoa_to_sheet(csv),filename="".concat(situationname,"-").concat((new Date).toISOString().slice(0,10),"-export.xlsx");_xlsxMini.default.utils.book_append_sheet(wb,ws,"Plannings"),_xlsxMini.default.writeFile(wb,filename)}}));

//# sourceMappingURL=plannings.min.js.map