define("mod_competvet/local/view/roleassign",["exports","mod_competvet/local/new-repository","mod_competvet/local/forms/role_upload_form"],(function(_exports,_newRepository,_role_upload_form){var obj;
/**
   * Manage role assignments for competvet.
   *
   * @module     mod_competvet/local/view/roleassign
   * @copyright  2025 Bas Brands <bas@sonsbeekmedia.nl>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_newRepository=(obj=_newRepository)&&obj.__esModule?obj:{default:obj};class CompetvetRoleAssign{constructor(){this.app=document.querySelector('[data-region="roleassign"]'),this.app&&this.addEventListeners()}addEventListeners(){document.addEventListener("click",(event=>{event.target.matches('[data-action="add"]')&&this.handleRoleAssignment(event),event.target.matches('[data-action="remove"]')&&this.handleRoleRemoval(event),event.target.matches('[data-action="exportcsv"]')&&(event.preventDefault(),this.exportCsv(event))}))}handleRoleAssignment(event){event.preventDefault();const addSelect=this.app.querySelector("select#addselect"),selectedUserIds=Array.from(addSelect.selectedOptions).map((option=>option.value));window.console.log("Assigning role to users: ".concat(selectedUserIds.join(", ")));_newRepository.default.addRemoveRols({action:"add",userids:selectedUserIds,roleid:this.app.dataset.roleid,cmid:this.app.dataset.cmid})?this.updateUI():window.console.error("Failed to assign roles for users:",selectedUserIds)}handleRoleRemoval(event){event.preventDefault();const removeSelect=this.app.querySelector("select#removeselect"),userIds=Array.from(removeSelect.selectedOptions).map((option=>option.value));window.console.log("Removing role from users: ".concat(userIds.join(", ")));_newRepository.default.addRemoveRols({action:"remove",userids:userIds,roleid:this.app.dataset.roleid,cmid:this.app.dataset.cmid})?this.updateUI():window.console.error("Failed to remove roles for users:",userIds)}async exportCsv(event){event.preventDefault();const csvData=await _newRepository.default.getRoles({cmid:this.app.dataset.cmid});if(!csvData||!Array.isArray(csvData))return void window.console.error("Failed to export role assignments to CSV.");const roles=csvData.map((r=>r.roleshortname)),userSet=new Set;csvData.forEach((role=>{role.users.forEach((user=>{userSet.add(user.username)}))}));const usernames=Array.from(userSet),userRoleMap={};usernames.forEach((username=>{userRoleMap[username]={},roles.forEach((role=>{userRoleMap[username][role]=!1}))})),csvData.forEach((role=>{role.users.forEach((user=>{userRoleMap[user.username][role.roleshortname]=!0}))}));const rows=[["username",...roles]];usernames.forEach((username=>{const row=[username];roles.forEach((role=>{row.push(userRoleMap[username][role]?"1":"")})),rows.push(row)}));const csvString=rows.map((row=>row.join(";"))).join("\n"),csvContent="data:text/csv;charset=utf-8,"+encodeURIComponent(csvString),link=document.createElement("a");link.setAttribute("href",csvContent),link.setAttribute("download","role_assignments.csv"),document.body.appendChild(link),link.click(),document.body.removeChild(link),window.console.log("Role assignments exported to CSV successfully."),this.updateUI()}updateUI(){window.console.log("UI updated after role assignment/removal."),window.location.reload()}}var _default={init:()=>{new CompetvetRoleAssign}};return _exports.default=_default,_exports.default}));

//# sourceMappingURL=roleassign.min.js.map