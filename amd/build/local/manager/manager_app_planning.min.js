define("mod_competvet/local/manager/manager_app_planning",["exports","mod_competvet/local/competstate","mod_competvet/local/new-repository","./plannings","core/modal_save_cancel","core/str","core/modal_events"],(function(_exports,_competstate,_newRepository,_plannings,_modal_save_cancel,_str,_modal_events){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * Moves wrapping navigation items into a more menu.
   *
   * @module     mod_competvet/local/manager/manager_app_planning
   * @class      competvet
   * @copyright  2024 Bas Brands
   * @author     Bas Brands <bas@sonsbeekmedia.nl>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_competstate=_interopRequireDefault(_competstate),_newRepository=_interopRequireDefault(_newRepository),_modal_save_cancel=_interopRequireDefault(_modal_save_cancel),_modal_events=_interopRequireDefault(_modal_events);class Manager{constructor(){this.app=document.querySelector('[data-region="planning"]'),this.cmId=this.app.dataset.cmId,this.situationId=this.app.dataset.situationId,this.dataset=this.app.region,this.addEventListeners(),this.getData()}async getData(){const response=await _newRepository.default.getPlannings(this.cmId);response&&_competstate.default.setData(response)}addEventListeners(){document.addEventListener("click",(e=>{let btn=e.target.closest("[data-action]");btn&&(e.preventDefault(),this.actions(btn))})),this.app.classList.add("jsenabled")}async actions(btn){if("add"===btn.dataset.action&&this.add(btn),"edit"===btn.dataset.action&&this.edit(btn),"save"===btn.dataset.action){await this.save()&&this.stopEdit()}"delete"===btn.dataset.action&&this.delete(btn)}add(btn){let state=_competstate.default.getData();if("planning"===btn.dataset.type&&state.plannings.push({id:0,situationid:this.situationId,startdate:this.getSuggested("startdate"),enddate:this.getSuggested("enddate"),groupid:"",session:this.getSuggested("session"),edit:!0,groups:state.groups,pauses:[]}),"pause"===btn.dataset.type){const planningid=parseInt(btn.dataset.id),planning=state.plannings.find((element=>element.id===planningid));planning.pauses.push({id:0,planningid:planningid,startdate:planning.startdate,enddate:planning.enddate,editpause:!0})}_competstate.default.setData(state)}async delete(btn){let state=_competstate.default.getData();if("planning"===btn.dataset.type){const planning=state.plannings.find((element=>element.id===parseInt(btn.dataset.id))),deletePlanning=()=>{state.plannings.find((element=>element.id===parseInt(btn.dataset.id))).deleted=!0,_competstate.default.setData(state),this.save()};if(planning.hasuserdata){const modal=await _modal_save_cancel.default.create({title:(0,_str.getString)("delete","mod_competvet"),body:(0,_str.getString)("confirmplanningdelete","mod_competvet")});modal.show(),modal.getRoot().on(_modal_events.default.save,(()=>{deletePlanning()}))}else deletePlanning()}if("pause"===btn.dataset.type){const pauseid=parseInt(btn.dataset.id);this.getPause(pauseid).deleted=!0,_competstate.default.setData(state),this.save()}}edit(btn){let state=_competstate.default.getData();if(state.plannings.forEach((element=>{element.edit=!1,element.pauses.forEach((pause=>{pause.editpause=!1}))})),"planning"===btn.dataset.type){state.plannings.find((element=>element.id===parseInt(btn.dataset.id))).edit=!0}if("pause"===btn.dataset.type){const pause=this.getPause(parseInt(btn.dataset.id));pause&&(pause.editpause=!0)}_competstate.default.setData(state)}getPause(id){const state=_competstate.default.getData();for(const planning of state.plannings)if(planning.pauses){const pause=planning.pauses.find((element=>element.id===id));if(pause)return pause}return null}stopEdit(){const state=_competstate.default.getData();state.plannings.forEach((element=>{element.edit=!1,element.pauses.forEach((pause=>{pause.editpause=!1}))})),_competstate.default.setData(state)}update(){const state=_competstate.default.getData();state.plannings.forEach((element=>{element.haschanged=!1,element.edit&&(element.haschanged=!0,element.startdate=this.getValue("planitem","startdate",element.id),element.enddate=this.getValue("planitem","enddate",element.id),element.groupid=this.getValue("planitem","groupid",element.id),""!==element.groupid&&(element.groupname=element.groups.find((group=>group.id===parseInt(element.groupid))).name),element.session=this.getValue("planitem","session",element.id),""===element.startdate&&(element.errorstartdate=!0,element.error=!0),""===element.enddate&&(element.errorenddate=!0,element.error=!0),""===element.groupid&&(element.errorgroupid=!0,element.error=!0),""!==element.startdate&&""!==element.enddate&&""!==element.groupid&&(element.error=!1),element.session||(element.errorsession=!0,element.error=!0)),this.updatePauses(element)})),_competstate.default.setData(state)}updatePauses(element){element.pauses.forEach((pause=>{if(pause.haschanged=!1,pause.editpause){pause.haschanged=!0,pause.startdate=this.getValue("pauseitem","startdate",pause.id),pause.enddate=this.getValue("pauseitem","enddate",pause.id);const startdate=new Date(pause.startdate).getTime(),enddate=new Date(pause.enddate).getTime(),elementstartdate=new Date(element.startdate).getTime(),elementenddate=new Date(element.enddate).getTime();startdate<elementstartdate&&(pause.errorstartdate=!0,pause.error=!0),enddate>elementenddate&&(pause.errorenddate=!0,pause.error=!0),""===pause.startdate&&(pause.errorstartdate=!0,pause.error=!0),""===pause.enddate&&(pause.errorenddate=!0,pause.error=!0),""!==pause.startdate&&""!==pause.enddate&&(pause.error=!1)}}))}get planningObjectKeys(){return["id","situationid","startdate","enddate","groupid","session","pauses","haschanged","deleted"]}get pauseObjectKeys(){return["id","planningid","startdate","enddate","haschanged","deleted"]}async save(){this.update();const state=_competstate.default.getData();if(state.plannings.find((element=>element.error)))return!1;if(state.plannings.find((element=>element.pauses.find((pause=>pause.error)))))return!1;const saveState={plannings:[]};state.plannings.length>0&&(saveState.plannings=[...state.plannings]),saveState.plannings.forEach((element=>{Object.keys(element).forEach((key=>{this.planningObjectKeys.includes(key)||delete element[key]})),element.pauses.forEach((pause=>{Object.keys(pause).forEach((key=>{this.pauseObjectKeys.includes(key)||delete pause[key]}))}))}));const result=await _newRepository.default.savePlannings(saveState);return this.getData(),result}getValue(element,property,id){const domNode=this.app.querySelector('[data-region="'.concat(element,'"][data-id="').concat(id,'"] [data-field="').concat(property,'"]'));if(!domNode){window.console.log("Element not found: ".concat(element," ").concat(property," ").concat(id));const element=this.app.querySelector('[data-region="'.concat(element,'"][data-id="').concat(id,'"]'));if(!element)return window.console.log("Element not found: ".concat(element," ").concat(id)),""}return domNode.value}getSuggested(property){const state=_competstate.default.getData();let lastPlanning=state.plannings[state.plannings.length-1],starttime=(new Date).getTime();if(lastPlanning&&(starttime=new Date(lastPlanning.enddate).getTime()),"startdate"===property){const date=new Date(starttime);return date.setDate(date.getDate()+(8-date.getDay())%7),date.toISOString().slice(0,16)}if("enddate"===property){const date=new Date(starttime);return date.setDate(date.getDate()+(8-date.getDay())%7),date.setDate(date.getDate()+6),date.toISOString().slice(0,16)}if("session"===property){const sessionnames=state.plannings.map((element=>element.session));let counter=1,session="s-"+counter;for(;sessionnames.includes(session);)counter++,session="s-"+counter;return session}return""}}var _default={init:()=>{new Manager}};return _exports.default=_default,_exports.default}));

//# sourceMappingURL=manager_app_planning.min.js.map