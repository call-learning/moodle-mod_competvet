{"version":3,"file":"manager_app_todos.min.js","sources":["../../../src/local/manager/manager_app_todos.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Moves wrapping navigation items into a more menu.\n *\n * @module     mod_competvet/local/manager/manager_app_planning\n * @class      competvet\n * @copyright  2024 Bas Brands\n * @author     Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport CompetState from 'mod_competvet/local/competstate';\nimport Repository from 'mod_competvet/local/new-repository';\nimport {genericFormCreate} from \"../forms/generic_form_helper\";\nimport './todo';\n\n/*\n* A CRUD manager for data.\n*/\nclass Manager {\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this.app = document.querySelector('[data-region=\"managetodos\"]');\n        this.cmId = this.app.dataset.cmId;\n        this.userId = this.app.dataset.userId;\n        this.dataset = this.app.region;\n        this.getData();\n        this.addEventListeners();\n    }\n\n    /**\n     * Get the data for this manager.\n     */\n    async getData() {\n        const response = await Repository.getTodos({\n            'userid': this.userId,\n        });\n        if (!response) {\n            return;\n        }\n        CompetState.setData(response);\n        this.toggleEmptyTodos();\n    }\n\n    /**\n     * Hide / Show the data-empty-todos elements.\n     */\n    toggleEmptyTodos() {\n        const state = CompetState.getData();\n        const hasTodos = state.todos.filter((todo) => !todo.deleted).length > 0;\n        this.app.querySelectorAll('[data-empty-todos]').forEach((element) => {\n            element.classList.toggle('d-none', element.getAttribute('data-empty-todos') === String(hasTodos));\n        });\n    }\n\n    /**\n     * Add event listeners to the page.\n     * @return {void}\n     */\n    addEventListeners() {\n        document.addEventListener('click', (e) => {\n            let btn = e.target.closest('[data-button-action]');\n            if (btn) {\n                e.preventDefault();\n                this.actions(btn);\n            }\n        });\n        const radioSelectAll = this.app.querySelector('[data-radio-action=\"selectall\"]');\n        if (radioSelectAll) {\n\n            radioSelectAll.addEventListener('change', (e) => {\n                const checkboxes = this.app.querySelectorAll('[data-radio-action=\"selectone\"]');\n                if (e.target.checked) {\n                    checkboxes.forEach((checkbox) => {\n                        checkbox.checked = true;\n                    });\n                } else {\n                    checkboxes.forEach((checkbox) => {\n                        checkbox.checked = false;\n                    });\n                }\n            });\n        }\n        this.app.classList.add('jsenabled');\n    }\n\n    /**\n     * Actions.\n     * @param {object} btn The button that was clicked.\n     */\n    async actions(btn) {\n        if (btn.dataset.buttonAction === 'delete') {\n            this.delete(btn);\n        }\n        if (btn.dataset.buttonAction === 'deleteselected') {\n            this.deleteselected();\n        }\n        if (btn.dataset.buttonAction === 'observation-add') {\n            this.addObservation(btn);\n        }\n        if (btn.dataset.buttonAction === 'cert-decl-evaluator') {\n            this.addCertDeclEvaluator(btn);\n        }\n        if (btn.dataset.buttonAction === 'date-sort-asc') {\n            this.sort('timecreated', 'asc');\n            btn.classList.add('d-none');\n            this.app.querySelector('[data-button-action=\"date-sort-desc\"]').classList.remove('d-none');\n        }\n        if (btn.dataset.buttonAction === 'date-sort-desc') {\n            this.sort('timecreated', 'desc');\n            btn.classList.add('d-none');\n            this.app.querySelector('[data-button-action=\"date-sort-asc\"]').classList.remove('d-none');\n        }\n        if (btn.dataset.buttonAction === 'targetuser-sort-asc') {\n            this.sort('targetuser.fullname', 'asc');\n            btn.classList.add('d-none');\n            this.app.querySelector('[data-button-action=\"targetuser-sort-desc\"]').classList.remove('d-none');\n        }\n        if (btn.dataset.buttonAction === 'targetuser-sort-desc') {\n            this.sort('targetuser.fullname', 'desc');\n            btn.classList.add('d-none');\n            this.app.querySelector('[data-button-action=\"targetuser-sort-asc\"]').classList.remove('d-none');\n        }\n    }\n\n    /**\n     * Delete a todo by manipulating the state.\n     * @param {object} btn The button that was clicked.\n     */\n    async delete(btn) {\n        let state = CompetState.getData();\n        if (btn.dataset.type === 'todo') {\n            state.todos.find((element) => element.id === parseInt(btn.dataset.id)).deleted = true;\n            CompetState.setData(state);\n            this.deleteTodos();\n        }\n    }\n\n    /**\n     * Delete selected todos.\n     * @return {void}\n     */\n    async deleteselected() {\n        let state = CompetState.getData();\n        let todos = state.todos;\n        let selected = this.app.querySelectorAll('[data-radio-action=\"selectone\"]:checked');\n        selected.forEach((checkbox) => {\n            todos.find((element) => element.id === parseInt(checkbox.dataset.id)).deleted = true;\n        });\n        CompetState.setData(state);\n        this.deleteTodos();\n    }\n\n    /**\n     * Save the state to the server.\n     *\n     * @return {Bool} True if the state was saved.\n     */\n    async deleteTodos() {\n        const state = CompetState.getData();\n        const todoIds = state.todos.filter((todo) => todo.deleted).map((todo) => todo.id);\n        if (!todoIds.length) {\n            return;\n        }\n        await Repository.deleteTodos({todoids: todoIds});\n        this.toggleEmptyTodos();\n    }\n\n    /**\n     * Add an observation.\n     * @param {object} btn The button that was clicked.\n     */\n    addObservation(btn) {\n        const submitEventHandler = () => {\n            window.location.reload();\n        };\n        const modalForm = genericFormCreate(btn.dataset, 'observation:add', 'mod_competvet', 'eval_observation_add');\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, submitEventHandler);\n        modalForm.show();\n    }\n\n    /**\n     * Add a cert decl evaluator.\n     * @param {object} btn The button that was clicked.\n     */\n    addCertDeclEvaluator(btn) {\n        const submitEventHandler = () => {\n            window.location.reload();\n        };\n        const modalForm = genericFormCreate(btn.dataset, 'certdecl', 'mod_competvet', 'cert_decl_evaluator');\n\n        // This sets the level field to the value of the range input.\n        modalForm.addEventListener(modalForm.events.LOADED, () => {\n            // Get the value of the range input and set it to the hidden level field.\n            modalForm.modal.getRoot().on('modal:bodyRendered', () => {\n                const rangeInput = modalForm.modal.getRoot().find('input[type=\"range\"]');\n                const levelInput = modalForm.modal.getRoot().find('input[name=\"level\"]');\n                const currentLevel = modalForm.modal.getRoot().find('[data-region=\"current-level\"]');\n                rangeInput.val(levelInput.val());\n                currentLevel.text(levelInput.val());\n            });\n        });\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, submitEventHandler);\n        modalForm.show();\n    }\n\n    /**\n     * Get the value of a nested property using dot notation.\n     * @param {object} obj The object to query.\n     * @param {string} path The path to the property (e.g., 'targetuser.fullname').\n     * @returns {*} The value of the nested property.\n     */\n    getNestedValue(obj, path) {\n        return path.split('.').reduce((acc, part) => acc && acc[part], obj);\n    }\n\n    /**\n     * Sort the todos.\n     * @param {string} field The field to sort on.\n     * @param {string} direction The direction to sort.\n     */\n    sort(field, direction) {\n        let state = CompetState.getData();\n        state.todos = state.todos.sort((a, b) => {\n            const aValue = this.getNestedValue(a, field);\n            const bValue = this.getNestedValue(b, field);\n\n            if (aValue > bValue) {\n                return direction === 'asc' ? 1 : -1;\n            } else if (aValue < bValue) {\n                return direction === 'asc' ? -1 : 1;\n            } else {\n                return 0;\n            }\n        });\n        CompetState.setData(state);\n    }\n}\n\n/*\n * Initialise\n *\n */\nconst init = () => {\n    new Manager();\n};\n\nexport default {\n    init: init,\n};"],"names":["Manager","constructor","app","document","querySelector","cmId","this","dataset","userId","region","getData","addEventListeners","response","Repository","getTodos","setData","toggleEmptyTodos","hasTodos","CompetState","todos","filter","todo","deleted","length","querySelectorAll","forEach","element","classList","toggle","getAttribute","String","addEventListener","e","btn","target","closest","preventDefault","actions","radioSelectAll","checkboxes","checked","checkbox","add","buttonAction","delete","deleteselected","addObservation","addCertDeclEvaluator","sort","remove","state","type","find","id","parseInt","deleteTodos","todoIds","map","todoids","modalForm","events","FORM_SUBMITTED","window","location","reload","show","LOADED","modal","getRoot","on","rangeInput","levelInput","currentLevel","val","text","getNestedValue","obj","path","split","reduce","acc","part","field","direction","a","b","aValue","bValue","init"],"mappings":"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"}