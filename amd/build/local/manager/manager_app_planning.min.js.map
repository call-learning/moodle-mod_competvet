{"version":3,"file":"manager_app_planning.min.js","sources":["../../../src/local/manager/manager_app_planning.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Moves wrapping navigation items into a more menu.\n *\n * @module     mod_competvet/local/manager/manager_app_planning\n * @class      competvet\n * @copyright  2024 Bas Brands\n * @author     Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport CompetState from 'mod_competvet/local/competstate';\nimport Repository from 'mod_competvet/local/new-repository';\nimport './plannings';\nimport ModalSaveCancel from 'core/modal_save_cancel';\nimport {getString} from 'core/str';\nimport ModalEvents from 'core/modal_events';\n\n/*\n* A CRUD manager for data.\n*/\nclass Manager {\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this.app = document.querySelector('[data-region=\"planning\"]');\n        this.cmId = this.app.dataset.cmId;\n        this.situationId = this.app.dataset.situationId;\n        this.dataset = this.app.region;\n        this.addEventListeners();\n        this.getData();\n    }\n\n    /**\n     * Get the data for this manager.\n     */\n    async getData() {\n        const response = await Repository.getPlannings(this.cmId);\n        if (!response) {\n            return;\n        }\n        CompetState.setData(response);\n    }\n\n    /**\n     * Add event listeners to the page.\n     * @return {void}\n     */\n    addEventListeners() {\n        document.addEventListener('click', (e) => {\n            let btn = e.target.closest('[data-action]');\n            if (btn) {\n                e.preventDefault();\n                this.actions(btn);\n            }\n        });\n        this.app.classList.add('jsenabled');\n    }\n\n    /**\n     * Actions.\n     * @param {object} btn The button that was clicked.\n     */\n    async actions(btn) {\n        if (btn.dataset.action === 'add') {\n            this.add(btn);\n        }\n        if (btn.dataset.action === 'edit') {\n            this.edit(btn);\n        }\n        if (btn.dataset.action === 'save') {\n            const result = await this.save();\n            if (result) {\n                this.stopEdit();\n            }\n        }\n        if (btn.dataset.action === 'delete') {\n            this.delete(btn);\n        }\n    }\n\n    /**\n     * Add a new planning or category by manipulating the state, for the state structure see the example data structure.\n     * @param {object} btn The button that was clicked.\n     */\n    add(btn) {\n        let state = CompetState.getData();\n        if (btn.dataset.type === 'planning') {\n            state.plannings.push({\n                id: 0,\n                situationid: this.situationId, // TODO set the correct situation id.\n                startdate: '',\n                enddate: '',\n                groupid: '',\n                session: '',\n                edit: true,\n                groups: state.groups,\n            });\n        }\n        CompetState.setData(state);\n    }\n\n    /**\n     * Delete a planning or category by manipulating the state, for the state structure see the example data structure.\n     * @param {object} btn The button that was clicked.\n     */\n    async delete(btn) {\n        let state = CompetState.getData();\n        if (btn.dataset.type === 'planning') {\n            const planning = state.plannings.find((element) => element.id === parseInt(btn.dataset.id));\n            const deletePlanning = () => {\n                state.plannings.find((element) => element.id === parseInt(btn.dataset.id)).deleted = true;\n                CompetState.setData(state);\n                this.save();\n            };\n            if (planning.hasuserdata) {\n                const modal = await ModalSaveCancel.create({\n                    title: getString('delete', 'mod_competvet'),\n                    body: getString('confirmplanningdelete', 'mod_competvet'),\n                });\n                modal.show();\n                modal.getRoot().on(ModalEvents.save, () => {\n                    deletePlanning();\n                });\n            } else {\n                deletePlanning();\n            }\n\n        }\n\n    }\n\n    /**\n     * Edit a planning or category by manipulating the state, for the state structure see the example data structure.\n     * All fields in the button container row with data-fieldtype will be made editable.\n     * @param {object} btn The button that was clicked.\n     */\n    edit(btn) {\n        let state = CompetState.getData();\n        // Remove edit from all fields.\n        state.plannings.forEach((element) => {\n            element.edit = false;\n        });\n        if (btn.dataset.type === 'planning') {\n            let planning = state.plannings.find((element) => element.id === parseInt(btn.dataset.id));\n            planning.edit = true;\n        }\n        CompetState.setData(state);\n    }\n\n    /**\n     * Stop editing, remove the edit flag from the state elements.\n     */\n    stopEdit() {\n        const state = CompetState.getData();\n        // Remove edit from all fields.\n        state.plannings.forEach((element) => {\n            element.edit = false;\n        });\n        CompetState.setData(state);\n    }\n\n    update() {\n        const state = CompetState.getData();\n        state.plannings.forEach((element) => {\n            element.haschanged = false;\n            if (element.edit) {\n                // Update the grid with the new values from the UI.\n                element.haschanged = true;\n                element.startdate = this.getValue('planitem', 'startdate', element.id);\n                element.enddate = this.getValue('planitem', 'enddate', element.id);\n                element.groupid = this.getValue('planitem', 'groupid', element.id);\n                if (element.groupid !== '') {\n                    element.groupname = element.groups.find((group) => group.id === parseInt(element.groupid)).name;\n                }\n                element.session = this.getValue('planitem', 'session', element.id);\n                // Set the error flag if startdate, enddate or groupid are empty.\n                if (element.startdate === '') {\n                    element.errorstartdate = true;\n                    element.error = true;\n                }\n                if (element.enddate === '') {\n                    element.errorenddate = true;\n                    element.error = true;\n                }\n                if (element.groupid === '') {\n                    element.errorgroupid = true;\n                    element.error = true;\n                }\n                if (element.startdate !== '' && element.enddate !== '' && element.groupid !== '') {\n                    element.error = false;\n                }\n            }\n        });\n        CompetState.setData(state);\n    }\n\n    /**\n     * Get the planning object structure.\n     */\n    get planningObjectKeys() {\n        return ['id', 'situationid', 'startdate', 'enddate', 'groupid', 'session', 'haschanged', 'deleted'];\n    }\n\n    /**\n     * Save the state to the server.\n     *\n     * @return {Bool} True if the state was saved.\n     */\n    async save() {\n        this.update();\n        const state = CompetState.getData();\n        // If any element has an error, do not save.\n        if (state.plannings.find((element) => element.error)) {\n            return false;\n        }\n        const saveState = {\n            plannings: [],\n        };\n        if (state.plannings.length > 0) {\n            saveState.plannings = [...state.plannings];\n        }\n        saveState.plannings.forEach((element) => {\n            // Delete all foreign keys.\n            Object.keys(element).forEach((key) => {\n                if (!this.planningObjectKeys.includes(key)) {\n                    delete element[key];\n                }\n            });\n        });\n        const result = await Repository.savePlannings(saveState);\n        this.getData();\n        return result;\n    }\n\n    /**\n     * Get the field value from the UI.\n     * @param {String} element The element to get the value from.\n     * @param {String} property The element property.\n     * @param {String} id The element id.\n     * @return {String} The value of the element.\n     */\n    getValue(element, property, id) {\n        const domNode = this.app.querySelector(`[data-region=\"${element}\"][data-id=\"${id}\"] [data-field=\"${property}\"]`);\n        if (!domNode) {\n            window.console.log(`Element not found: ${element} ${property} ${id}`);\n            const element = this.app.querySelector(`[data-region=\"${element}\"][data-id=\"${id}\"]`);\n            if (!element) {\n                window.console.log(`Element not found: ${element} ${id}`);\n                return '';\n            }\n        }\n        return domNode.value;\n    }\n}\n\n/*\n * Initialise\n *\n */\nconst init = () => {\n    new Manager();\n};\n\nexport default {\n    init: init,\n};"],"names":["Manager","constructor","app","document","querySelector","cmId","this","dataset","situationId","region","addEventListeners","getData","response","Repository","getPlannings","setData","addEventListener","e","btn","target","closest","preventDefault","actions","classList","add","action","edit","save","stopEdit","delete","state","CompetState","type","plannings","push","id","situationid","startdate","enddate","groupid","session","groups","planning","find","element","parseInt","deletePlanning","deleted","hasuserdata","modal","ModalSaveCancel","create","title","body","show","getRoot","on","ModalEvents","forEach","update","haschanged","getValue","groupname","group","name","errorstartdate","error","errorenddate","errorgroupid","planningObjectKeys","saveState","length","Object","keys","key","includes","result","savePlannings","property","domNode","window","console","log","value","init"],"mappings":"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"}