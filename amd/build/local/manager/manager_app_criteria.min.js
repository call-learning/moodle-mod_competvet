define("mod_competvet/local/manager/manager_app_criteria",["exports","mod_competvet/local/competstate","mod_competvet/local/new-repository","core/str","./grids","./navigation"],(function(_exports,_competstate,_newRepository,_str,_grids,_navigation){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * Moves wrapping navigation items into a more menu.
   *
   * @module     mod_competvet/local/manager/manager_app_criteria
   * @class      competvet
   * @copyright  2024 Bas Brands
   * @author     Bas Brands <bas@sonsbeekmedia.nl>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_competstate=_interopRequireDefault(_competstate),_newRepository=_interopRequireDefault(_newRepository);class Manager{constructor(){this.app=document.querySelector('[data-region="criteria"]'),this.cmId=this.app.dataset.cmId,this.situationId=this.app.dataset.situationId,this.sets=[1,2,3],this.cmId?this.dataset=2:this.dataset=1,this.addEventListeners(),this.getData(),this.cmId||this.setNavigation()}async getData(){const args={type:this.dataset,gridid:0,situationid:this.situationId},response=await _newRepository.default.getCriteria(args);_competstate.default.setValue("datatree",response)}setNavigation(){const context={eval:1==this.dataset,evalconst:1,list:3==this.dataset,listconst:3,certif:2==this.dataset,certifconst:2};_competstate.default.setValue("navigation",context),_competstate.default.setValue("type",this.dataset)}addEventListeners(){document.addEventListener("click",(e=>{let btn=e.target.closest("[data-action]");btn&&(e.preventDefault(),this.actions(btn))})),document.addEventListener("saveState",(async()=>{this.save()})),this.app.classList.add("jsenabled")}actions(btn){"add"===btn.dataset.action&&this.add(btn),"edit"===btn.dataset.action&&this.edit(btn),"save"===btn.dataset.action&&(this.save(),this.stopEdit()),"delete"===btn.dataset.action&&this.delete(btn),"changedataset"===btn.dataset.action&&(this.dataset=Number(btn.dataset.dataset),this.setNavigation(),this.getData())}removeEdit(){_competstate.default.getValue("datatree").grids.forEach((element=>{element.criteria.forEach((element=>{element.edit=!1}))}))}async add(btn){this.update();let state=_competstate.default.getValue("datatree");if("grid"===btn.dataset.type){let newGridSortOrder=1;state.grids.length>0&&(newGridSortOrder=Math.max(...state.grids.map((element=>element.sortorder)))+1),state.grids.push({gridname:"",edit:!0,canedit:!0,type:this.dataset,placeholder:await(0,_str.get_string)("newgrid","mod_competvet"),gridid:-1,sortorder:newGridSortOrder,criteria:[]})}if("criterion"===btn.dataset.type){this.removeEdit();const index=state.grids.find((element=>element.gridid===parseInt(btn.dataset.gridId)));let newCritSortOrder=1;index.criteria.length>0&&(newCritSortOrder=Math.max(...index.criteria.map((element=>element.sortorder)))+1);const newcriterion={criterionid:0,idnumber:"G"+index.gridid+"-C"+newCritSortOrder,sortorder:newCritSortOrder,title:"",placeholder:await(0,_str.get_string)("newcriterion","mod_competvet"),options:[],edit:!0};3!=this.dataset&&1!=this.dataset||(newcriterion.hasoptions=!0),index.criteria.push(newcriterion)}if("option"===btn.dataset.type){const index=state.grids.find((element=>element.gridid===parseInt(btn.dataset.gridId))),criterion=index.criteria.find((element=>element.criterionid===parseInt(btn.dataset.criterionId)));criterion.edit=!0;let newOptSortOrder=1;criterion.options.length>0&&(newOptSortOrder=Math.max(...criterion.options.map((element=>element.sortorder)))+1);const newOption={optionid:0,idnumber:"G"+index.gridid+"-C"+criterion.criterionid+"-O"+newOptSortOrder,sortorder:newOptSortOrder,title:"",placeholder:await(0,_str.get_string)("newoption","mod_competvet")};3===this.dataset&&(newOption.hasgrade=!0,newOption.grade=0),criterion.options.push(newOption)}_competstate.default.setValue("datatree",state)}delete(btn){let state=_competstate.default.getValue("datatree");if("grid"===btn.dataset.type&&(state.grids.find((element=>element.gridid===parseInt(btn.dataset.id))).deleted=!0),"criterion"===btn.dataset.type){state.grids.find((element=>element.gridid===parseInt(btn.dataset.gridId))).criteria.find((element=>element.criterionid===parseInt(btn.dataset.id))).deleted=!0}if("option"===btn.dataset.type){state.grids.find((element=>element.gridid===parseInt(btn.dataset.gridId))).criteria.find((element=>element.criterionid===parseInt(btn.dataset.criterionId))).options.find((element=>element.optionid===parseInt(btn.dataset.id))).deleted=!0}_competstate.default.setValue("datatree",state),this.save()}edit(btn){const state=_competstate.default.getValue("datatree");if(this.stopEdit(state),"grid"===btn.dataset.type){state.grids.find((element=>element.gridid===parseInt(btn.dataset.id))).edit=!0}if("criterion"===btn.dataset.type){const criterion=state.grids.find((element=>element.gridid===parseInt(btn.dataset.gridId))).criteria.find((element=>element.criterionid===parseInt(btn.dataset.id)));criterion.edit=!0,3==this.dataset||1==this.dataset?criterion.hasoptions=!0:criterion.hasoptions=!1}_competstate.default.setValue("datatree",state)}stopEdit(){const state=_competstate.default.getValue("datatree");state.grids.forEach((element=>{element.edit=!1,element.criteria.forEach((element=>{element.edit=!1}))})),_competstate.default.setValue("datatree",state)}update(){const state=_competstate.default.getValue("datatree");state.grids.forEach((element=>{element.edit&&(element.haschanged=!0,element.gridname=this.getValue("grid","gridname",element.gridid),element.situationid=this.situationId),element.criteria.forEach((element=>{if(element.edit&&!element.deleted){if(element.haschanged=!0,element.label=this.getValue("criterion","label",element.criterionid),!element.hasoptions)return;element.options.forEach((element=>{element.deleted||(element.label=this.getValue("option","label",element.optionid),3===this.dataset&&(element.grade=this.getValue("option","grade",element.optionid),element.grade=parseFloat(element.grade)))}))}}))})),_competstate.default.setValue("datatree",state)}get gridObjectKeys(){return["gridid","gridname","type","situationid","sortorder","criteria","haschanged","deleted","updatesortorder"]}get criterionObjectKeys(){return["criterionid","idnumber","sortorder","label","options","haschanged","hasoptions","deleted","updatesortorder"]}get optionObjectKeys(){return["optionid","idnumber","sortorder","label","grade","haschanged","deleted","updatesortorder"]}cleanState(){const state=_competstate.default.getValue("datatree"),saveState={grids:[]};return state.grids.length>0&&(saveState.grids=[...state.grids]),saveState.grids.forEach((element=>{Object.keys(element).forEach((key=>{this.gridObjectKeys.includes(key)||delete element[key]})),element.criteria.forEach((element=>{Object.keys(element).forEach((key=>{this.criterionObjectKeys.includes(key)||delete element[key]})),element.haschanged||(element.haschanged=!1),element.hasoptions&&element.options.forEach((element=>{Object.keys(element).forEach((key=>{this.optionObjectKeys.includes(key)||delete element[key],3!==this.dataset&&delete element.grade}))}))}))})),saveState.type=Number(this.dataset),saveState}async save(){this.update();const saveState=this.cleanState();await _newRepository.default.saveCriteria(saveState),this.getData()}getValue(element,property,id){const domNode=this.app.querySelector('[data-region="'.concat(element,'"][data-id="').concat(id,'"] [data-field="').concat(property,'"]'));return"DIV"===domNode.tagName?domNode.innerHTML:domNode.value}}var _default={init:()=>{new Manager}};return _exports.default=_default,_exports.default}));

//# sourceMappingURL=manager_app_criteria.min.js.map