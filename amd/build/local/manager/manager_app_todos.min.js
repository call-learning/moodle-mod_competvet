define("mod_competvet/local/manager/manager_app_todos",["exports","mod_competvet/local/competstate","mod_competvet/local/new-repository","./todo"],(function(_exports,_competstate,_newRepository,_todo){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * Moves wrapping navigation items into a more menu.
   *
   * @module     mod_competvet/local/manager/manager_app_planning
   * @class      competvet
   * @copyright  2024 Bas Brands
   * @author     Bas Brands <bas@sonsbeekmedia.nl>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_competstate=_interopRequireDefault(_competstate),_newRepository=_interopRequireDefault(_newRepository);class Manager{constructor(){this.app=document.querySelector('[data-region="managetodos"]'),this.cmId=this.app.dataset.cmId,this.userId=this.app.dataset.userId,this.dataset=this.app.region,this.getData(),this.addEventListeners()}async getData(){const response=await _newRepository.default.getTodos({userid:this.userId});response&&(_competstate.default.setData(response),this.toggleEmptyTodos())}toggleEmptyTodos(){const hasTodos=_competstate.default.getData().todos.filter((todo=>!todo.deleted)).length>0;this.app.querySelectorAll("[data-empty-todos]").forEach((element=>{element.classList.toggle("d-none",element.getAttribute("data-empty-todos")===String(hasTodos))}))}addEventListeners(){document.addEventListener("click",(e=>{let btn=e.target.closest("[data-button-action]");btn&&(e.preventDefault(),this.actions(btn))}));const radioSelectAll=this.app.querySelector('[data-radio-action="selectall"]');radioSelectAll&&radioSelectAll.addEventListener("change",(e=>{const checkboxes=this.app.querySelectorAll('[data-radio-action="selectone"]');e.target.checked?checkboxes.forEach((checkbox=>{checkbox.checked=!0})):checkboxes.forEach((checkbox=>{checkbox.checked=!1}))})),this.app.classList.add("jsenabled")}async actions(btn){"delete"===btn.dataset.buttonAction&&this.delete(btn),"deleteselected"===btn.dataset.buttonAction&&this.deleteselected()}async delete(btn){let state=_competstate.default.getData();"todo"===btn.dataset.type&&(state.todos.find((element=>element.id===parseInt(btn.dataset.id))).deleted=!0,_competstate.default.setData(state),this.deleteTodos())}async deleteselected(){let state=_competstate.default.getData(),todos=state.todos;this.app.querySelectorAll('[data-radio-action="selectone"]:checked').forEach((checkbox=>{todos.find((element=>element.id===parseInt(checkbox.dataset.id))).deleted=!0})),_competstate.default.setData(state),this.deleteTodos()}async deleteTodos(){const todoIds=_competstate.default.getData().todos.filter((todo=>todo.deleted)).map((todo=>todo.id));todoIds.length&&(await _newRepository.default.deleteTodos({todoids:todoIds}),this.toggleEmptyTodos())}}var _default={init:()=>{new Manager}};return _exports.default=_default,_exports.default}));

//# sourceMappingURL=manager_app_todos.min.js.map