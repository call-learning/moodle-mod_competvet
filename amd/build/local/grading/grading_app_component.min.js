define("mod_competvet/local/grading/grading_app_component",["exports","../new-repository","../competstate","./components/user_navigation","./components/evaluations_grading","./components/list_grading","./components/globalgrade","./components/certification_grading","./components/certification_results","./components/list_results","./components/evaluation_results","./components/evaluation_chart","./components/subgrades"],(function(_exports,_newRepository,_competstate,_user_navigation,_evaluations_grading,_list_grading,_globalgrade,_certification_grading,_certification_results,_list_results,_evaluation_results,_evaluation_chart,_subgrades){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_newRepository=_interopRequireDefault(_newRepository),_competstate=_interopRequireDefault(_competstate);class Competvet{constructor(){_defineProperty(this,"gradingApp",void 0),_defineProperty(this,"competvet",void 0),_defineProperty(this,"currentUser",void 0),this.gradingApp=document.querySelector('[data-region="grading-app"]'),this.cmId=this.gradingApp.dataset.cmId,this.evalgrid=this.gradingApp.dataset.evalgrid,this.certifgrid=this.gradingApp.dataset.certifgrid,this.listgrid=this.gradingApp.dataset.listgrid,this.planning={id:this.gradingApp.dataset.planningid,situationid:this.gradingApp.dataset.situationid,cmid:this.cmId},_competstate.default.setValue("planning",this.planning),this.userlist=[],this.currentUser=0,this.setup(),this.addEventListeners()}async setup(){await this.getUsers();const currentUserId=this.gradingApp.dataset.studentid;currentUserId&&"0"!==currentUserId?this.setCurrentUser(this.userlist.find((user=>user.id===parseInt(currentUserId)))):this.setCurrentUser(this.userlist[0])}async setCurrentUser(user){this.gradingApp.dataset.studentid=user.id,user.cangrade=1==this.gradingApp.dataset.cangrade,_competstate.default.setValue("user",user),this.currentUser=user,this.setEvalResults(),this.setCertifResults(),this.setListResults(),await this.setListGrading(),await this.setSubGrades(),await this.setGlobalGrade(),await this.setForms(),this.setSuggestedGrade(),this.setStateFormValues()}async setEvalResults(){const args={studentid:this.currentUser.id,planningid:this.planning.id},evalResponse=await _newRepository.default.getEvalResults(args);_competstate.default.setValue("evaluation-results",evalResponse),_competstate.default.setValue("evaluation-chart",evalResponse)}async setCertifResults(){const args={studentid:this.currentUser.id,planningid:this.planning.id},certResponse=await _newRepository.default.getCertifResults(args);_competstate.default.setValue("certification-results",certResponse)}async setListResults(){const args={userid:this.currentUser.id,planningid:this.planning.id},response=await _newRepository.default.getListResults(args);_competstate.default.setValue("list-results",response)}async setListGrading(){const args={type:3,gridid:this.listgrid},response=await _newRepository.default.getCriteria(args);if(!response.grids)return;const context={grading:{criteria:response.grids[0].criteria,timemodified:response.grids[0].timemodified,cangrade:1==this.gradingApp.dataset.cangrade}};context.grading.criteria.forEach((criterion=>{criterion.options[1].selected=!0})),_competstate.default.setValue("list-grading",context)}async getUsers(){const args={planningid:this.planning.id},response=await _newRepository.default.getStudentList(args);response.users&&(this.userlist=response.users,_competstate.default.setValue("userlist",this.userlist))}async setGlobalGrade(){const args={cmid:this.cmId,planningid:this.planning.id,userid:this.currentUser.id},response=await _newRepository.default.getGlobalGrade(args);response.result&&(response.result.hideaccept=!0,_competstate.default.setValue("globalgrade",response.result))}async setSubGrades(){const args={studentid:this.currentUser.id,planningid:this.planning.id},response=await _newRepository.default.getSubGrades(args);_competstate.default.setValue("subgrades",response)}async setSuggestedGrade(){const suggestedArgs={studentid:this.currentUser.id,planningid:this.planning.id},globalGrade=_competstate.default.getValue("globalgrade"),response=await _newRepository.default.getSuggestedGrade(suggestedArgs);globalGrade.suggestedgrade=response.suggestedgrade,globalGrade.gradecalculation=response.gradecalculation,globalGrade.hideaccept=0==response.suggestedgrade||response.suggestedgrade==globalGrade.finalgrade,_competstate.default.setValue("globalgrade",globalGrade)}async setForms(){await Promise.all(["evaluations-grading","certification-grading","list-grading"].map((async formname=>{const args={userid:this.currentUser.id,planningid:this.gradingApp.dataset.planningid,formname:formname},response=await _newRepository.default.getFormData(args);if(!response.result)return;const context={grading:JSON.parse(response.data),cangrade:1==this.gradingApp.dataset.cangrade};if("list-grading"===formname){const listGrading=_competstate.default.getValue("list-grading");if(listGrading.grading.timemodified>response.timemodified)return void window.console.log("List grading form is outdated:"+listGrading.grading.timemodified+" "+response.timemodified)}_competstate.default.setValue(formname,context)})))}setStateFormValues(){const certifGrading=_competstate.default.getValue("certification-grading"),certifResults=_competstate.default.getValue("certification-results");certifGrading.grading.maxcertifvalidated=certifResults.certifications.length,certifGrading.grading.numcertifvalidated=certifResults.certifications.filter((cert=>!0===cert.confirmed)).length,certifGrading.grading.statusproposed=!1,certifGrading.grading.maxcertifvalidated===certifGrading.grading.numcertifvalidated&&certifGrading.grading.maxcertifvalidated>0&&(certifGrading.grading.statusproposed=!0);const evalGrading=_competstate.default.getValue("evaluations-grading"),evalResults=_competstate.default.getValue("evaluation-results");evalGrading.grading.evalnum=this.gradingApp.dataset.evalnum;let numberofobservations=0,numberofselfevaluations=0;evalResults.evaluations.length>0&&evalResults.evaluations[0].grades.forEach((grade=>{grade.graderinfo.id!=this.currentUser.id?numberofobservations++:numberofselfevaluations++}));let noSelfEvalPenalty=-30;numberofselfevaluations>0&&(evalGrading.grading.selfevalselectoptions[1].selected=!0,noSelfEvalPenalty=0),evalGrading.grading.numberofobservations=numberofobservations,evalGrading.grading.haspenalty=evalGrading.grading.evalnum>numberofobservations,evalGrading.grading.evalscore=evalResults.totalaverage;let penalty=evalGrading.grading.deactivatepenalty?0:1;penalty=evalGrading.grading.haspenalty*penalty,evalGrading.grading.finalscore=evalGrading.grading.evalscore+evalGrading.grading.penalty*penalty+noSelfEvalPenalty,evalGrading.grading.finalscore<0&&(evalGrading.grading.finalscore=0)}moveUser(direction){let index=this.userlist.indexOf(this.currentUser);"prev"===direction&&index>0?this.setCurrentUser(this.userlist[index-1]):"next"===direction&&index<this.userlist.length-1&&this.setCurrentUser(this.userlist[index+1])}addEventListeners(){document.addEventListener("click",(async event=>{if(event.target.closest('[data-action="prevuser"]')&&this.moveUser("prev"),event.target.closest('[data-action="nextuser"]')&&this.moveUser("next"),event.target.closest('[data-action="setuser"]')){const userId=event.target.closest('[data-action="setuser"]').dataset.userid;this.setCurrentUser(this.userlist.find((user=>user.id===parseInt(userId))))}event.target.closest('[data-action="reload"]')&&this.getEvaluations()})),this.gradingApp.addEventListener("certAdded",(()=>{this.setCertifResults()})),this.gradingApp.addEventListener("setSuggestedGrade",(async()=>{this.setSubGrades(),this.setSuggestedGrade()}))}}var _default={init:()=>{new Competvet}};return _exports.default=_default,_exports.default}));

//# sourceMappingURL=grading_app_component.min.js.map