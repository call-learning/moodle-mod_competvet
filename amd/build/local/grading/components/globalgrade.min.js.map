{"version":3,"file":"globalgrade.min.js","sources":["../../../../src/local/grading/components/globalgrade.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module globalgrade\n *\n * @module     mod_competvet/local/grading/components/globalgrade\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport CompetState from '../../competstate';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport Repository from '../../new-repository';\n\nconst gradingApp = document.querySelector('[data-region=\"grading-app\"]');\n\nconst stateTemplate = () => {\n    const templateName = 'globalgrade';\n    const region = gradingApp.querySelector(`[data-region=\"${templateName}\"]`);\n    if (!region) {\n        return;\n    }\n    const template = `mod_competvet/grading/components/${templateName}`;\n    const regionRenderer = (context) => {\n        if (context[templateName] === undefined) {\n            return;\n        }\n        Templates.render(template, context).then((html) => {\n            region.innerHTML = html;\n            formEvents();\n            return;\n        }).catch(Notification.exception);\n    };\n    CompetState.subscribe(templateName, regionRenderer);\n};\n\nconst formCalculation = () => {\n    const form = document.querySelector('[data-region=\"globalgrade\"]');\n    const formData = new FormData(form);\n    const formObject = Object.fromEntries(formData);\n    const {globalgrade, user} = CompetState.getData();\n    globalgrade.userid = user.id;\n    globalgrade.finalgrade = formObject.finalgrade;\n    globalgrade.hideaccept = true;\n    if (globalgrade.scoreevaluator !== globalgrade.finalgrade) {\n        globalgrade.hideaccept = false;\n    }\n    globalgrade.comment = formObject.comment;\n    return globalgrade;\n};\n\nconst formEvents = () => {\n    const form = document.querySelector('[data-region=\"globalgrade\"]');\n    const acceptGradeButton = form.querySelector('[data-action=\"acceptgrade\"]');\n    if (acceptGradeButton) {\n        acceptGradeButton.addEventListener('click', async(e) => {\n            e.preventDefault();\n            form.querySelector(acceptGradeButton.dataset.target).value =\n                form.querySelector(acceptGradeButton.dataset.source).innerHTML;\n        });\n    }\n    if (form.dataset.events) {\n        return;\n    }\n    form.addEventListener('submit', async(e) => {\n        e.preventDefault();\n        const globalgrade = formCalculation();\n        const user = CompetState.getValue('user');\n        const planning = CompetState.getValue('planning');\n        const args = {\n            userid: user.id,\n            cmid: planning.cmid,\n            planningid: planning.id,\n            grade: globalgrade.finalgrade,\n            feedback: globalgrade.comment\n        };\n        const result = await Repository.saveGlobalGrade(args);\n        globalgrade.gradesuccess = result.result;\n        globalgrade.gradeerror = !result.result;\n        globalgrade.commentsuccess = result.result;\n        globalgrade.commenterror = !result.result;\n\n        CompetState.setValue('globalgrade', globalgrade);\n    });\n    form.dataset.events = true;\n};\n\nstateTemplate();\n"],"names":["gradingApp","document","querySelector","formEvents","form","acceptGradeButton","addEventListener","async","e","preventDefault","dataset","target","value","source","innerHTML","events","globalgrade","formData","FormData","formObject","Object","fromEntries","user","CompetState","getData","userid","id","finalgrade","hideaccept","scoreevaluator","comment","formCalculation","getValue","planning","args","cmid","planningid","grade","feedback","result","Repository","saveGlobalGrade","gradesuccess","gradeerror","commentsuccess","commenterror","setValue","region","template","subscribe","context","undefined","render","then","html","catch","Notification","exception","stateTemplate"],"mappings":";;;;;;;qNA4BMA,WAAaC,SAASC,cAAc,+BAqCpCC,WAAa,WACTC,KAAOH,SAASC,cAAc,+BAC9BG,kBAAoBD,KAAKF,cAAc,+BACzCG,mBACAA,kBAAkBC,iBAAiB,SAASC,MAAAA,IACxCC,EAAEC,iBACFL,KAAKF,cAAcG,kBAAkBK,QAAQC,QAAQC,MACjDR,KAAKF,cAAcG,kBAAkBK,QAAQG,QAAQC,aAG7DV,KAAKM,QAAQK,SAGjBX,KAAKE,iBAAiB,UAAUC,MAAAA,IAC5BC,EAAEC,uBACIO,YA9BU,YACdZ,KAAOH,SAASC,cAAc,+BAC9Be,SAAW,IAAIC,SAASd,MACxBe,WAAaC,OAAOC,YAAYJ,WAChCD,YAACA,YAADM,KAAcA,MAAQC,qBAAYC,iBACxCR,YAAYS,OAASH,KAAKI,GAC1BV,YAAYW,WAAaR,WAAWQ,WACpCX,YAAYY,YAAa,EACrBZ,YAAYa,iBAAmBb,YAAYW,aAC3CX,YAAYY,YAAa,GAE7BZ,YAAYc,QAAUX,WAAWW,QAC1Bd,aAkBiBe,GACdT,KAAOC,qBAAYS,SAAS,QAC5BC,SAAWV,qBAAYS,SAAS,YAChCE,KAAO,CACTT,OAAQH,KAAKI,GACbS,KAAMF,SAASE,KACfC,WAAYH,SAASP,GACrBW,MAAOrB,YAAYW,WACnBW,SAAUtB,YAAYc,SAEpBS,aAAeC,uBAAWC,gBAAgBP,MAChDlB,YAAY0B,aAAeH,OAAOA,OAClCvB,YAAY2B,YAAcJ,OAAOA,OACjCvB,YAAY4B,eAAiBL,OAAOA,OACpCvB,YAAY6B,cAAgBN,OAAOA,4BAEvBO,SAAS,cAAe9B,gBAExCZ,KAAKM,QAAQK,QAAS,IApEJ,YAEZgC,OAAS/C,WAAWE,sCADL,yBAEhB6C,oBAGCC,oDALe,oCAgBTC,UAhBS,eAMGC,eACUC,IAA1BD,QAAO,gCAGDE,OAAOJ,SAAUE,SAASG,MAAMC,OACtCP,OAAOjC,UAAYwC,KACnBnD,gBAEDoD,MAAMC,sBAAaC,eAwD9BC"}