{"version":3,"file":"list_grading.min.js","sources":["../../../../src/local/grading/components/list_grading.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module grading_app_usernavigation\n *\n * @module     mod_competvet/local/grading/components/list_grading\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\nimport CompetState from '../../competstate';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport Repository from '../../new-repository';\nimport {getLetterGrade} from '../../helpers';\n\nconst gradingApp = document.querySelector('[data-region=\"grading-app\"]');\n\nconst LIST_GRADE = 3;\n\n/**\n * Define the user navigation.\n */\nconst stateTemplate = () => {\n    const templateName = 'list-grading';\n    const region = gradingApp.querySelector(`[data-region=\"${templateName}\"]`);\n    if (!region) {\n        return;\n    }\n    const template = `mod_competvet/grading/components/${templateName}`;\n    const regionRenderer = (context) => {\n        if (context[templateName] === undefined) {\n            return;\n        }\n        // TODO, make the grid selection dynamic.\n        Templates.render(template, context).then((html) => {\n            region.innerHTML = html;\n            formEvents();\n            return;\n        }).catch(Notification.exception);\n    };\n    CompetState.subscribe(templateName, regionRenderer);\n};\n\nconst formCalculation = () => {\n    const form = document.querySelector('[data-region=\"list-grading\"]');\n    const formData = new FormData(form);\n    const formObject = Object.fromEntries(formData);\n    const listGrading = CompetState.getValue('list-grading');\n    const grading = listGrading.grading;\n    grading.subgrade = 0;\n    grading.criteria.forEach((criterion) => {\n        const criterionId = criterion.criterionid;\n        criterion.grade = formObject[`criterion-${criterionId}`];\n        criterion.comment = formObject[`criterion-${criterionId}-comment`];\n        criterion.options.forEach((option) => {\n            if (option.grade == criterion.grade) {\n                option.selected = true;\n                grading.subgrade += option.grade;\n            } else {\n                option.selected = false;\n            }\n        });\n    });\n    grading.finalscore = Math.round(grading.subgrade);\n    grading.maxfinalscore = 100;\n    grading.scoreevaluator = formObject.scoreevaluator;\n    grading.lettergrade = getLetterGrade(grading.scoreevaluator);\n    if (grading.scoreevaluator) {\n        grading.subgrade = grading.scoreevaluator;\n    }\n    grading.comment = formObject.comment;\n    const context = {\n        grading: grading\n    };\n    return context;\n};\n\nconst formEvents = () => {\n    const form = document.querySelector('[data-region=\"list-grading\"]');\n    const acceptGradeButton = form.querySelector('[data-action=\"acceptgrade\"]');\n    if (acceptGradeButton) {\n        acceptGradeButton.addEventListener('click', async(e) => {\n            e.preventDefault();\n            form.querySelector(acceptGradeButton.dataset.target).value =\n                form.querySelector(acceptGradeButton.dataset.source).innerHTML;\n        });\n    }\n    if (form.dataset.events) {\n        return;\n    }\n    const context = formCalculation();\n    CompetState.setValue('list-grading', context);\n    form.addEventListener('submit', async(e) => {\n        e.preventDefault();\n        const context = formCalculation();\n        const user = CompetState.getValue('user');\n        const planning = CompetState.getValue('planning');\n\n        const args = {\n            userid: user.id,\n            planningid: planning.id,\n            situationid: planning.situationid,\n            formname: 'list-grading',\n            json: JSON.stringify(context.grading)\n        };\n        const result = await Repository.saveFormData(args);\n        context.isvalid = result.result;\n        context.isinvalid = !result.result;\n        context.cangrade = true; // This is because the form is saved.\n        CompetState.setValue('list-grading', context);\n\n        // Now set the sub grade that will be used for the suggested grade.\n        const subgradeArgs = {\n            studentid: user.id,\n            planningid: planning.id,\n            grade: context.grading.subgrade,\n            type: LIST_GRADE\n        };\n        await Repository.setSubGrade(subgradeArgs);\n\n        const customEvent = new CustomEvent('setSuggestedGrade', {});\n        gradingApp.dispatchEvent(customEvent);\n\n    });\n    form.addEventListener('change', (e) => {\n        if (e.target.type === 'radio') {\n            let sumvalues = 0;\n            // Get all the selected options for each criterion.\n            const selectedOptions = form.querySelectorAll('input[type=\"radio\"]:checked');\n            sumvalues = Array.from(selectedOptions).reduce((acc, option) => {\n                return acc + parseFloat(option.value);\n            }, 0);\n            // Finalscore input\n            const finalscore = form.querySelector('[id=\"finalscore\"]');\n            if (finalscore) {\n                finalscore.innerHTML = Math.ceil(sumvalues);\n            }\n        }\n        if (e.target.name === 'scoreevaluator') {\n            form.querySelector('[data-region=\"lettergrade\"]').innerHTML = getLetterGrade(e.target.value);\n        }\n    });\n    form.dataset.events = true;\n};\n\nstateTemplate();\n"],"names":["gradingApp","document","querySelector","formCalculation","form","formData","FormData","formObject","Object","fromEntries","grading","CompetState","getValue","subgrade","criteria","forEach","criterion","criterionId","criterionid","grade","comment","options","option","selected","finalscore","Math","round","maxfinalscore","scoreevaluator","lettergrade","formEvents","acceptGradeButton","addEventListener","async","e","preventDefault","dataset","target","value","source","innerHTML","events","context","setValue","user","planning","args","userid","id","planningid","situationid","formname","json","JSON","stringify","result","Repository","saveFormData","isvalid","isinvalid","cangrade","subgradeArgs","studentid","type","setSubGrade","customEvent","CustomEvent","dispatchEvent","sumvalues","selectedOptions","querySelectorAll","Array","from","reduce","acc","parseFloat","ceil","name","region","template","subscribe","undefined","render","then","html","catch","Notification","exception","stateTemplate"],"mappings":";;;;;;;qNA8BMA,WAAaC,SAASC,cAAc,+BA4BpCC,gBAAkB,WACdC,KAAOH,SAASC,cAAc,gCAC9BG,SAAW,IAAIC,SAASF,MACxBG,WAAaC,OAAOC,YAAYJ,UAEhCK,QADcC,qBAAYC,SAAS,gBACbF,QAC5BA,QAAQG,SAAW,EACnBH,QAAQI,SAASC,SAASC,kBAChBC,YAAcD,UAAUE,YAC9BF,UAAUG,MAAQZ,+BAAwBU,cAC1CD,UAAUI,QAAUb,+BAAwBU,yBAC5CD,UAAUK,QAAQN,SAASO,SACnBA,OAAOH,OAASH,UAAUG,OAC1BG,OAAOC,UAAW,EAClBb,QAAQG,UAAYS,OAAOH,OAE3BG,OAAOC,UAAW,QAI9Bb,QAAQc,WAAaC,KAAKC,MAAMhB,QAAQG,UACxCH,QAAQiB,cAAgB,IACxBjB,QAAQkB,eAAiBrB,WAAWqB,eACpClB,QAAQmB,aAAc,2BAAenB,QAAQkB,gBACzClB,QAAQkB,iBACRlB,QAAQG,SAAWH,QAAQkB,gBAE/BlB,QAAQU,QAAUb,WAAWa,cACb,CACZV,QAASA,UAKXoB,WAAa,WACT1B,KAAOH,SAASC,cAAc,gCAC9B6B,kBAAoB3B,KAAKF,cAAc,kCACzC6B,mBACAA,kBAAkBC,iBAAiB,SAASC,MAAAA,IACxCC,EAAEC,iBACF/B,KAAKF,cAAc6B,kBAAkBK,QAAQC,QAAQC,MACjDlC,KAAKF,cAAc6B,kBAAkBK,QAAQG,QAAQC,aAG7DpC,KAAKgC,QAAQK,oBAGXC,QAAUvC,uCACJwC,SAAS,eAAgBD,SACrCtC,KAAK4B,iBAAiB,UAAUC,MAAAA,IAC5BC,EAAEC,uBACIO,QAAUvC,kBACVyC,KAAOjC,qBAAYC,SAAS,QAC5BiC,SAAWlC,qBAAYC,SAAS,YAEhCkC,KAAO,CACTC,OAAQH,KAAKI,GACbC,WAAYJ,SAASG,GACrBE,YAAaL,SAASK,YACtBC,SAAU,eACVC,KAAMC,KAAKC,UAAUZ,QAAQhC,UAE3B6C,aAAeC,uBAAWC,aAAaX,MAC7CJ,QAAQgB,QAAUH,OAAOA,OACzBb,QAAQiB,WAAaJ,OAAOA,OAC5Bb,QAAQkB,UAAW,uBACPjB,SAAS,eAAgBD,eAG/BmB,aAAe,CACjBC,UAAWlB,KAAKI,GAChBC,WAAYJ,SAASG,GACrB7B,MAAOuB,QAAQhC,QAAQG,SACvBkD,KAnGO,SAqGLP,uBAAWQ,YAAYH,oBAEvBI,YAAc,IAAIC,YAAY,oBAAqB,IACzDlE,WAAWmE,cAAcF,gBAG7B7D,KAAK4B,iBAAiB,UAAWE,OACP,UAAlBA,EAAEG,OAAO0B,KAAkB,KACvBK,UAAY,QAEVC,gBAAkBjE,KAAKkE,iBAAiB,+BAC9CF,UAAYG,MAAMC,KAAKH,iBAAiBI,QAAO,CAACC,IAAKpD,SAC1CoD,IAAMC,WAAWrD,OAAOgB,QAChC,SAEGd,WAAapB,KAAKF,cAAc,qBAClCsB,aACAA,WAAWgB,UAAYf,KAAKmD,KAAKR,YAGnB,mBAAlBlC,EAAEG,OAAOwC,OACTzE,KAAKF,cAAc,+BAA+BsC,WAAY,2BAAeN,EAAEG,OAAOC,WAG9FlC,KAAKgC,QAAQK,QAAS,GAxHJ,YAEZqC,OAAS9E,WAAWE,sCADL,0BAEhB4E,oBAGCC,oDALe,qCAiBTC,UAjBS,gBAMGtC,eACUuC,IAA1BvC,QAPa,oCAWPwC,OAAOH,SAAUrC,SAASyC,MAAMC,OACtCN,OAAOtC,UAAY4C,KACnBtD,gBAEDuD,MAAMC,sBAAaC,eA2G9BC"}